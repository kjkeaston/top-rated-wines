# version: "3"
# services:
#   mongodb:
#     image: "mongo"
#     ports:
#      - "27017:27017"
#   backend:
#     build: ./backend/
#     ports:
#       - "8080:8080"
#     volumes:
#       - ./backend:/usr/src/app
#     depends_on:
#       - mongodb
#   frontend:
#     build: ./frontend/
#     ports:
#       - "3000:3000"
#     volumes:
#       - ./frontend:/usr/src/app
#     depends_on:
#       - backend


#######
#######
#######

version: "3"

services:
  ##########################
  ### SETUP SERVER CONTAINER
  ##########################
  backend:
    # Tell docker what file to build the backend from
    build:
      context: ./backend
      dockerfile: Dockerfile
    # The ports to expose
    expose:
      - 4000
    # Environment variables
    environment:
      - MONGO_URI=mongodb://db:27017/db
      - PORT=4000
      - JWT_SECRET=secretsecret
      - JWT_EXPIRY=30d
      - DEBUG=worker:*
      - MORGAN=combined
      - NODE_ENV=development
    # Port mapping
    ports:
      - 4000:4000
    # Volumes to mount
    volumes:
      - ./backend:/app/backend
    # Run command
    # Nodemon for hot reloading (-L flag required for polling in Docker)
    command: nodemon -L server.js
    # Connect to other containers
    links:
      - db
    # Restart action
    restart: always
  ##########################
  ### SETUP CLIENT CONTAINER
  ##########################
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      - REACT_APP_PORT=3000
      - CHOKIDAR_USEPOLLING=true
    expose:
      - 3000
    ports:
      - 3000:3000
    volumes:
      - ./frontend:/app/frontend/src
      - ./frontend:/app/frontend/public
    links:
      - backend
    command: npm start
    restart: always
  ##########################
  ### SETUP DB CONTAINER
  ##########################
  db:
    image: mongo
    ports:
      - 27017:27017
    restart: always
